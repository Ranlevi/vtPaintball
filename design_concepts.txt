Text Tag
===========

A text based paintball game.

Login:
User enters a name. The server verifies that no other user has the same name.
The user spawns in a lobby. 
He can chat with other users, create a game or join one.

Client Modals:
Some user actions result in a modal opening to change props.
The way this is implemented:
- User clicks the initial commands (e.g. Edit User or Create Game)
- Client sends the command to the server.
- Server returns a message with current props.
- Client opens the modal and populates it with the given props.




If create, he is teleported to a room in a map, and gets a code that he can share ingame (via tell or invite cmds).
He can also edit some game parameters: max num of users, max score. etc.
The spawn room has equipment that users can take.
Users can change teams (red or blue).
The user who created the game enters the start command.

Users are teleported to spawn rooms. 
They move inside the map.
When two users meet, one can shot the other. The losing side respawns, game score 
is updated. 
The game includes sounds that users make to give hints, colors, weapons, traps...
When score is reached - one side wins. Users can stay in the game and restart, or quit to lobby. 

There is no damage: a shot either hit or not.

In-game links
-------------
Any word can become a link with a link class.
Say click on Look. 
How do we know what is the target? ID is enough. 
Do we need a userbox feedback? Not if we make sure everything is clickable.
What about a command? innerHTML is enough with ID. 
How to prevent player from naming as a cmd? reseverd list.





When a user clicks an in-game link, the client needs to know what
entity the link is associated with. For example, if the user clicks
a room's name - we need to know what room this is, to display the
correct commands in the cmds_box.

To that goal, links have two types of information associated with them.
1. Style class: for the client to style the links.
2. Data: for association with an entity.
  - link_type:  NAME (for entities), CMD (for commands), CMD_BOX_LINK
  - id:         id of the clicked entity.
  - name:       name of the clicked entity.
  - action:     action associated with the link.

  sounds
  Player have a chance to emit sound when moving.
  Guns always make sound.
  Sound travels to immediate adjacent rooms (if exit exists between them) and then another room.
  User gets a message: 'noises from NORTH.' (direction of exit)


A container has entities (room, game.);
Each entity is responsible for itself. What does that mean? 
When a user moves - he takes care of everything.
Same with everything.


User can't interact with what he can't see.
How would this look like in a text game? 

X enters the room.
X leaves the room. 
Interactive items should be marked.

If client knew the state, could be done. 
Say the client tracks items on body and room, and entities. 


User creates the game.
User joins the game.
Send 'waiting' message.

User joins game.
If equal to minimum, start countdown.